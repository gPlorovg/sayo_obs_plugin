// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sayo.proto

#include "sayo.pb.h"
#include "sayo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sayo {

static const char* SayoService_method_names[] = {
  "/sayo.SayoService/StreamingASR",
  "/sayo.SayoService/Ping",
};

std::unique_ptr< SayoService::Stub> SayoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SayoService::Stub> stub(new SayoService::Stub(channel, options));
  return stub;
}

SayoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamingASR_(SayoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Ping_(SayoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::sayo::AudioChunk, ::sayo::ASRResult>* SayoService::Stub::StreamingASRRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::sayo::AudioChunk, ::sayo::ASRResult>::Create(channel_.get(), rpcmethod_StreamingASR_, context);
}

void SayoService::Stub::async::StreamingASR(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::sayo::AudioChunk,::sayo::ASRResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::sayo::AudioChunk,::sayo::ASRResult>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamingASR_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::sayo::AudioChunk, ::sayo::ASRResult>* SayoService::Stub::AsyncStreamingASRRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sayo::AudioChunk, ::sayo::ASRResult>::Create(channel_.get(), cq, rpcmethod_StreamingASR_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::sayo::AudioChunk, ::sayo::ASRResult>* SayoService::Stub::PrepareAsyncStreamingASRRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::sayo::AudioChunk, ::sayo::ASRResult>::Create(channel_.get(), cq, rpcmethod_StreamingASR_, context, false, nullptr);
}

::grpc::Status SayoService::Stub::Ping(::grpc::ClientContext* context, const ::sayo::PingRequest& request, ::sayo::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sayo::PingRequest, ::sayo::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void SayoService::Stub::async::Ping(::grpc::ClientContext* context, const ::sayo::PingRequest* request, ::sayo::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sayo::PingRequest, ::sayo::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void SayoService::Stub::async::Ping(::grpc::ClientContext* context, const ::sayo::PingRequest* request, ::sayo::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sayo::PingResponse>* SayoService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::sayo::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sayo::PingResponse, ::sayo::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sayo::PingResponse>* SayoService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::sayo::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

SayoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SayoService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SayoService::Service, ::sayo::AudioChunk, ::sayo::ASRResult>(
          [](SayoService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::sayo::ASRResult,
             ::sayo::AudioChunk>* stream) {
               return service->StreamingASR(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SayoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SayoService::Service, ::sayo::PingRequest, ::sayo::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SayoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sayo::PingRequest* req,
             ::sayo::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
}

SayoService::Service::~Service() {
}

::grpc::Status SayoService::Service::StreamingASR(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sayo::ASRResult, ::sayo::AudioChunk>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SayoService::Service::Ping(::grpc::ServerContext* context, const ::sayo::PingRequest* request, ::sayo::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sayo

